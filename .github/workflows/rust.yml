name: Rust

on:
  pull_request:
  push:
    branches:
      - master
      - dev
      - "*_impl"

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable, beta, nightly]
        target: [
          aarch64-unknown-linux-gnu,
          arm-unknown-linux-gnueabi,
          arm-unknown-linux-musleabi,
          armv7-unknown-linux-gnueabihf,
          armv7-unknown-linux-musleabihf,
          i586-unknown-linux-gnu,
          i686-unknown-linux-gnu,
          i686-unknown-linux-musl,
          mips-unknown-linux-gnu,
          mips64-unknown-linux-gnuabi64,
          mips64el-unknown-linux-gnuabi64,
          mipsel-unknown-linux-gnu,
          powerpc-unknown-linux-gnu,
          powerpc64-unknown-linux-gnu,
          powerpc64le-unknown-linux-gnu,
          x86_64-unknown-linux-gnu,
          x86_64-unknown-linux-musl,
          aarch64-linux-android,
          arm-linux-androideabi,
          armv7-linux-androideabi,
          x86_64-linux-android
        ]
        include:
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            ~/.cargo/bin
          key: ${{ matrix.os }}-${{ matrix.toolchain }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Updating repository
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update
      - name: Installing dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get install libasound2-dev libspeechd-dev
      - name: Setup toolchain
        if: ${{ matrix.toolchain != 'nightly' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          components: clippy, rustfmt
          override: true
      - name: Setup toolchain
        if: ${{ matrix.toolchain == 'nightly' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - name: Formatting
        if: ${{ matrix.toolchain != 'nightly' }}
        run: cargo fmt -- --check
      - name: Check (all features)
        if: ${{ matrix.toolchain != 'nightly' }}
        run: cargo check --locked --all-features
      - name: Clippy (all features)
        if: ${{ matrix.toolchain != 'nightly' }}
        run: cargo clippy --locked --all-features
      - name: Test (all features)
        run: cargo test --locked --all-features
      - name: Test release (all features)
        run: cargo test --release --locked --all-features
      - name: Build
        run: cargo build --release --locked
      - name: Build (all features)
        run: cargo build --release --locked --all-features
